// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2018 10:40:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decoderoutputA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoderoutputA_vlg_sample_tst(
	In,
	sampler_tx
);
input [6:0] In;
output sampler_tx;

reg sample;
time current_time;
always @(In)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decoderoutputA_vlg_check_tst (
	OutA,
	OutB,
	sampler_rx
);
input [3:0] OutA;
input [3:0] OutB;
input sampler_rx;

reg [3:0] OutA_expected;
reg [3:0] OutB_expected;

reg [3:0] OutA_prev;
reg [3:0] OutB_prev;

reg [3:0] OutA_expected_prev;
reg [3:0] OutB_expected_prev;

reg [3:0] last_OutA_exp;
reg [3:0] last_OutB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	OutA_prev = OutA;
	OutB_prev = OutB;
end

// update expected /o prevs

always @(trigger)
begin
	OutA_expected_prev = OutA_expected;
	OutB_expected_prev = OutB_expected;
end


// expected OutA[ 3 ]
initial
begin
	OutA_expected[3] = 1'bX;
end 
// expected OutA[ 2 ]
initial
begin
	OutA_expected[2] = 1'bX;
end 
// expected OutA[ 1 ]
initial
begin
	OutA_expected[1] = 1'bX;
end 
// expected OutA[ 0 ]
initial
begin
	OutA_expected[0] = 1'bX;
end 
// expected OutB[ 3 ]
initial
begin
	OutB_expected[3] = 1'bX;
end 
// expected OutB[ 2 ]
initial
begin
	OutB_expected[2] = 1'bX;
end 
// expected OutB[ 1 ]
initial
begin
	OutB_expected[1] = 1'bX;
end 
// expected OutB[ 0 ]
initial
begin
	OutB_expected[0] = 1'bX;
end 
// generate trigger
always @(OutA_expected or OutA or OutB_expected or OutB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OutA = %b | expected OutB = %b | ",OutA_expected_prev,OutB_expected_prev);
	$display("| real OutA = %b | real OutB = %b | ",OutA_prev,OutB_prev);
`endif
	if (
		( OutA_expected_prev[0] !== 1'bx ) && ( OutA_prev[0] !== OutA_expected_prev[0] )
		&& ((OutA_expected_prev[0] !== last_OutA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutA_expected_prev);
		$display ("     Real value = %b", OutA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OutA_exp[0] = OutA_expected_prev[0];
	end
	if (
		( OutA_expected_prev[1] !== 1'bx ) && ( OutA_prev[1] !== OutA_expected_prev[1] )
		&& ((OutA_expected_prev[1] !== last_OutA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutA_expected_prev);
		$display ("     Real value = %b", OutA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OutA_exp[1] = OutA_expected_prev[1];
	end
	if (
		( OutA_expected_prev[2] !== 1'bx ) && ( OutA_prev[2] !== OutA_expected_prev[2] )
		&& ((OutA_expected_prev[2] !== last_OutA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutA_expected_prev);
		$display ("     Real value = %b", OutA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OutA_exp[2] = OutA_expected_prev[2];
	end
	if (
		( OutA_expected_prev[3] !== 1'bx ) && ( OutA_prev[3] !== OutA_expected_prev[3] )
		&& ((OutA_expected_prev[3] !== last_OutA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutA_expected_prev);
		$display ("     Real value = %b", OutA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OutA_exp[3] = OutA_expected_prev[3];
	end
	if (
		( OutB_expected_prev[0] !== 1'bx ) && ( OutB_prev[0] !== OutB_expected_prev[0] )
		&& ((OutB_expected_prev[0] !== last_OutB_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutB_expected_prev);
		$display ("     Real value = %b", OutB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutB_exp[0] = OutB_expected_prev[0];
	end
	if (
		( OutB_expected_prev[1] !== 1'bx ) && ( OutB_prev[1] !== OutB_expected_prev[1] )
		&& ((OutB_expected_prev[1] !== last_OutB_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutB_expected_prev);
		$display ("     Real value = %b", OutB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutB_exp[1] = OutB_expected_prev[1];
	end
	if (
		( OutB_expected_prev[2] !== 1'bx ) && ( OutB_prev[2] !== OutB_expected_prev[2] )
		&& ((OutB_expected_prev[2] !== last_OutB_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutB_expected_prev);
		$display ("     Real value = %b", OutB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutB_exp[2] = OutB_expected_prev[2];
	end
	if (
		( OutB_expected_prev[3] !== 1'bx ) && ( OutB_prev[3] !== OutB_expected_prev[3] )
		&& ((OutB_expected_prev[3] !== last_OutB_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutB_expected_prev);
		$display ("     Real value = %b", OutB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutB_exp[3] = OutB_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decoderoutputA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] In;
// wires                                               
wire [3:0] OutA;
wire [3:0] OutB;

wire sampler;                             

// assign statements (if any)                          
decoderoutputA i1 (
// port map - connection between master ports and signals/registers   
	.In(In),
	.OutA(OutA),
	.OutB(OutB)
);
// In[ 6 ]
initial
begin
	In[6] = 1'b0;
end 
// In[ 5 ]
initial
begin
	In[5] = 1'b0;
	In[5] = #960000 1'b1;
end 
// In[ 4 ]
initial
begin
	In[4] = 1'b0;
	In[4] = #480000 1'b1;
	In[4] = #480000 1'b0;
end 
// In[ 3 ]
initial
begin
	repeat(2)
	begin
		In[3] = 1'b0;
		In[3] = #240000 1'b1;
		# 240000;
	end
	In[3] = 1'b0;
end 
// In[ 2 ]
initial
begin
	repeat(4)
	begin
		In[2] = 1'b0;
		In[2] = #120000 1'b1;
		# 120000;
	end
	In[2] = 1'b0;
end 
// In[ 1 ]
initial
begin
	repeat(8)
	begin
		In[1] = 1'b0;
		In[1] = #60000 1'b1;
		# 60000;
	end
	In[1] = 1'b0;
end 
// In[ 0 ]
initial
begin
	repeat(16)
	begin
		In[0] = 1'b0;
		In[0] = #30000 1'b1;
		# 30000;
	end
	In[0] = 1'b0;
	In[0] = #30000 1'b1;
end 

decoderoutputA_vlg_sample_tst tb_sample (
	.In(In),
	.sampler_tx(sampler)
);

decoderoutputA_vlg_check_tst tb_out(
	.OutA(OutA),
	.OutB(OutB),
	.sampler_rx(sampler)
);
endmodule

