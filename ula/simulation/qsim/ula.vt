// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/27/2018 18:04:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    calcTest
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module calcTest_vlg_sample_tst(
	clock,
	num,
	start,
	sampler_tx
);
input  clock;
input [7:0] num;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clock or num or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module calcTest_vlg_check_tst (
	inBinario,
	operation,
	regNumA,
	regNumB,
	result,
	state,
	sampler_rx
);
input [3:0] inBinario;
input [1:0] operation;
input [3:0] regNumA;
input [3:0] regNumB;
input [7:0] result;
input [1:0] state;
input sampler_rx;

reg [3:0] inBinario_expected;
reg [1:0] operation_expected;
reg [3:0] regNumA_expected;
reg [3:0] regNumB_expected;
reg [7:0] result_expected;
reg [1:0] state_expected;

reg [3:0] inBinario_prev;
reg [1:0] operation_prev;
reg [3:0] regNumA_prev;
reg [3:0] regNumB_prev;
reg [7:0] result_prev;
reg [1:0] state_prev;

reg [3:0] inBinario_expected_prev;
reg [1:0] operation_expected_prev;
reg [3:0] regNumA_expected_prev;
reg [3:0] regNumB_expected_prev;
reg [7:0] result_expected_prev;
reg [1:0] state_expected_prev;

reg [3:0] last_inBinario_exp;
reg [1:0] last_operation_exp;
reg [3:0] last_regNumA_exp;
reg [3:0] last_regNumB_exp;
reg [7:0] last_result_exp;
reg [1:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	inBinario_prev = inBinario;
	operation_prev = operation;
	regNumA_prev = regNumA;
	regNumB_prev = regNumB;
	result_prev = result;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	inBinario_expected_prev = inBinario_expected;
	operation_expected_prev = operation_expected;
	regNumA_expected_prev = regNumA_expected;
	regNumB_expected_prev = regNumB_expected;
	result_expected_prev = result_expected;
	state_expected_prev = state_expected;
end


// expected inBinario[ 3 ]
initial
begin
	inBinario_expected[3] = 1'bX;
end 
// expected inBinario[ 2 ]
initial
begin
	inBinario_expected[2] = 1'bX;
end 
// expected inBinario[ 1 ]
initial
begin
	inBinario_expected[1] = 1'bX;
end 
// expected inBinario[ 0 ]
initial
begin
	inBinario_expected[0] = 1'bX;
end 
// expected operation[ 1 ]
initial
begin
	operation_expected[1] = 1'bX;
end 
// expected operation[ 0 ]
initial
begin
	operation_expected[0] = 1'bX;
end 
// expected regNumA[ 3 ]
initial
begin
	regNumA_expected[3] = 1'bX;
end 
// expected regNumA[ 2 ]
initial
begin
	regNumA_expected[2] = 1'bX;
end 
// expected regNumA[ 1 ]
initial
begin
	regNumA_expected[1] = 1'bX;
end 
// expected regNumA[ 0 ]
initial
begin
	regNumA_expected[0] = 1'bX;
end 
// expected regNumB[ 3 ]
initial
begin
	regNumB_expected[3] = 1'bX;
end 
// expected regNumB[ 2 ]
initial
begin
	regNumB_expected[2] = 1'bX;
end 
// expected regNumB[ 1 ]
initial
begin
	regNumB_expected[1] = 1'bX;
end 
// expected regNumB[ 0 ]
initial
begin
	regNumB_expected[0] = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(inBinario_expected or inBinario or operation_expected or operation or regNumA_expected or regNumA or regNumB_expected or regNumB or result_expected or result or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected inBinario = %b | expected operation = %b | expected regNumA = %b | expected regNumB = %b | expected result = %b | expected state = %b | ",inBinario_expected_prev,operation_expected_prev,regNumA_expected_prev,regNumB_expected_prev,result_expected_prev,state_expected_prev);
	$display("| real inBinario = %b | real operation = %b | real regNumA = %b | real regNumB = %b | real result = %b | real state = %b | ",inBinario_prev,operation_prev,regNumA_prev,regNumB_prev,result_prev,state_prev);
`endif
	if (
		( inBinario_expected_prev[0] !== 1'bx ) && ( inBinario_prev[0] !== inBinario_expected_prev[0] )
		&& ((inBinario_expected_prev[0] !== last_inBinario_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inBinario[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inBinario_expected_prev);
		$display ("     Real value = %b", inBinario_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_inBinario_exp[0] = inBinario_expected_prev[0];
	end
	if (
		( inBinario_expected_prev[1] !== 1'bx ) && ( inBinario_prev[1] !== inBinario_expected_prev[1] )
		&& ((inBinario_expected_prev[1] !== last_inBinario_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inBinario[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inBinario_expected_prev);
		$display ("     Real value = %b", inBinario_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_inBinario_exp[1] = inBinario_expected_prev[1];
	end
	if (
		( inBinario_expected_prev[2] !== 1'bx ) && ( inBinario_prev[2] !== inBinario_expected_prev[2] )
		&& ((inBinario_expected_prev[2] !== last_inBinario_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inBinario[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inBinario_expected_prev);
		$display ("     Real value = %b", inBinario_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_inBinario_exp[2] = inBinario_expected_prev[2];
	end
	if (
		( inBinario_expected_prev[3] !== 1'bx ) && ( inBinario_prev[3] !== inBinario_expected_prev[3] )
		&& ((inBinario_expected_prev[3] !== last_inBinario_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inBinario[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inBinario_expected_prev);
		$display ("     Real value = %b", inBinario_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_inBinario_exp[3] = inBinario_expected_prev[3];
	end
	if (
		( operation_expected_prev[0] !== 1'bx ) && ( operation_prev[0] !== operation_expected_prev[0] )
		&& ((operation_expected_prev[0] !== last_operation_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_operation_exp[0] = operation_expected_prev[0];
	end
	if (
		( operation_expected_prev[1] !== 1'bx ) && ( operation_prev[1] !== operation_expected_prev[1] )
		&& ((operation_expected_prev[1] !== last_operation_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_expected_prev);
		$display ("     Real value = %b", operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_operation_exp[1] = operation_expected_prev[1];
	end
	if (
		( regNumA_expected_prev[0] !== 1'bx ) && ( regNumA_prev[0] !== regNumA_expected_prev[0] )
		&& ((regNumA_expected_prev[0] !== last_regNumA_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regNumA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regNumA_expected_prev);
		$display ("     Real value = %b", regNumA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regNumA_exp[0] = regNumA_expected_prev[0];
	end
	if (
		( regNumA_expected_prev[1] !== 1'bx ) && ( regNumA_prev[1] !== regNumA_expected_prev[1] )
		&& ((regNumA_expected_prev[1] !== last_regNumA_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regNumA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regNumA_expected_prev);
		$display ("     Real value = %b", regNumA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regNumA_exp[1] = regNumA_expected_prev[1];
	end
	if (
		( regNumA_expected_prev[2] !== 1'bx ) && ( regNumA_prev[2] !== regNumA_expected_prev[2] )
		&& ((regNumA_expected_prev[2] !== last_regNumA_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regNumA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regNumA_expected_prev);
		$display ("     Real value = %b", regNumA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regNumA_exp[2] = regNumA_expected_prev[2];
	end
	if (
		( regNumA_expected_prev[3] !== 1'bx ) && ( regNumA_prev[3] !== regNumA_expected_prev[3] )
		&& ((regNumA_expected_prev[3] !== last_regNumA_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regNumA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regNumA_expected_prev);
		$display ("     Real value = %b", regNumA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_regNumA_exp[3] = regNumA_expected_prev[3];
	end
	if (
		( regNumB_expected_prev[0] !== 1'bx ) && ( regNumB_prev[0] !== regNumB_expected_prev[0] )
		&& ((regNumB_expected_prev[0] !== last_regNumB_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regNumB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regNumB_expected_prev);
		$display ("     Real value = %b", regNumB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_regNumB_exp[0] = regNumB_expected_prev[0];
	end
	if (
		( regNumB_expected_prev[1] !== 1'bx ) && ( regNumB_prev[1] !== regNumB_expected_prev[1] )
		&& ((regNumB_expected_prev[1] !== last_regNumB_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regNumB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regNumB_expected_prev);
		$display ("     Real value = %b", regNumB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_regNumB_exp[1] = regNumB_expected_prev[1];
	end
	if (
		( regNumB_expected_prev[2] !== 1'bx ) && ( regNumB_prev[2] !== regNumB_expected_prev[2] )
		&& ((regNumB_expected_prev[2] !== last_regNumB_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regNumB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regNumB_expected_prev);
		$display ("     Real value = %b", regNumB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_regNumB_exp[2] = regNumB_expected_prev[2];
	end
	if (
		( regNumB_expected_prev[3] !== 1'bx ) && ( regNumB_prev[3] !== regNumB_expected_prev[3] )
		&& ((regNumB_expected_prev[3] !== last_regNumB_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regNumB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regNumB_expected_prev);
		$display ("     Real value = %b", regNumB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_regNumB_exp[3] = regNumB_expected_prev[3];
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module calcTest_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] num;
reg start;
// wires                                               
wire [3:0] inBinario;
wire [1:0] operation;
wire [3:0] regNumA;
wire [3:0] regNumB;
wire [7:0] result;
wire [1:0] state;

wire sampler;                             

// assign statements (if any)                          
calcTest i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.inBinario(inBinario),
	.num(num),
	.operation(operation),
	.regNumA(regNumA),
	.regNumB(regNumB),
	.result(result),
	.start(start),
	.state(state)
);

// start
initial
begin
	start = 1'b1;
	start = #30000 1'b0;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	# 10000;
	repeat(47)
	begin
		clock = 1'b0;
		clock = #10000 1'b1;
		# 10000;
	end
end 
// num[ 7 ]
initial
begin
	num[7] = 1'b1;
	num[7] = #190000 1'b0;
	num[7] = #60000 1'b1;
	num[7] = #40000 1'b0;
	num[7] = #60000 1'b1;
end 
// num[ 6 ]
initial
begin
	num[6] = 1'b1;
end 
// num[ 5 ]
initial
begin
	num[5] = 1'b1;
	num[5] = #90000 1'b0;
	num[5] = #60000 1'b1;
end 
// num[ 4 ]
initial
begin
	num[4] = 1'b1;
end 
// num[ 3 ]
initial
begin
	num[3] = 1'b1;
	num[3] = #190000 1'b0;
	num[3] = #60000 1'b1;
end 
// num[ 2 ]
initial
begin
	num[2] = 1'b1;
	num[2] = #90000 1'b0;
	num[2] = #60000 1'b1;
	num[2] = #140000 1'b0;
	num[2] = #60000 1'b1;
end 
// num[ 1 ]
initial
begin
	num[1] = 1'b1;
end 
// num[ 0 ]
initial
begin
	num[0] = 1'b1;
end 

calcTest_vlg_sample_tst tb_sample (
	.clock(clock),
	.num(num),
	.start(start),
	.sampler_tx(sampler)
);

calcTest_vlg_check_tst tb_out(
	.inBinario(inBinario),
	.operation(operation),
	.regNumA(regNumA),
	.regNumB(regNumB),
	.result(result),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

